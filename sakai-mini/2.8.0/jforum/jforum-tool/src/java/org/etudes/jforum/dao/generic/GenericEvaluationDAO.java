/**********************************************************************************
 * $URL: https://source.sakaiproject.org/contrib/etudes/sakai-jforum/tags/2.8.1/jforum-tool/src/java/org/etudes/jforum/dao/generic/GenericEvaluationDAO.java $ 
 * $Id: GenericEvaluationDAO.java 70458 2010-09-29 00:21:05Z murthy@etudes.org $ 
 *********************************************************************************** 
 * 
 * Copyright (c) 2008, 2009, 2010 Etudes, Inc. 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License. 
 * 
 * Portions completed before July 1, 2004 Copyright (c) 2003, 2004 Rafael Steil, All rights reserved, licensed under the BSD license. 
 * http://www.opensource.org/licenses/bsd-license.php 
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met: 
 * 
 * 1) Redistributions of source code must retain the above 
 * copyright notice, this list of conditions and the 
 * following disclaimer. 
 * 2) Redistributions in binary form must reproduce the 
 * above copyright notice, this list of conditions and 
 * the following disclaimer in the documentation and/or 
 * other materials provided with the distribution. 
 * 3) Neither the name of "Rafael Steil" nor 
 * the names of its contributors may be used to endorse 
 * or promote products derived from this software without 
 * specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT 
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 * THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE 
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE 
 ***********************************************************************************/

package org.etudes.jforum.dao.generic;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.etudes.jforum.JForum;
import org.etudes.jforum.dao.DataAccessDriver;
import org.etudes.jforum.dao.EvaluationDAO;
import org.etudes.jforum.entities.Evaluation;
import org.etudes.jforum.entities.Grade;
import org.etudes.jforum.entities.Topic;
import org.etudes.jforum.util.preferences.SystemGlobals;
import org.etudes.jforum.util.user.JForumUserUtil;
import org.sakaiproject.tool.cover.ToolManager;

/**
 * @author Murthy Tanniru
 */
public class GenericEvaluationDAO extends AutoKeys implements EvaluationDAO
{

	/**
	 * {@inheritDoc}
	 */
	public int addNew(Evaluation evaluation) throws Exception
	{
		PreparedStatement p = this.getStatementForAutoKeys("EvaluationModel.addNew");
		p.setInt(1, evaluation.getGradeId());
		p.setInt(2, evaluation.getUserId());
		p.setString(3, evaluation.getSakaiUserId());
		if (evaluation.getScore() == null)
			p.setNull(4, Types.FLOAT);
		else
			p.setFloat(4, evaluation.getScore());
		p.setString(5, evaluation.getComments());
		p.setInt(6, evaluation.getEvaluatedBy());
		p.setTimestamp(7, new Timestamp(System.currentTimeMillis()));
		p.setBoolean(8, evaluation.isReleased());

		this.setAutoGeneratedKeysQuery(SystemGlobals.getSql("EvaluationModel.lastGeneratedEvalId"));

		int evaluationId = this.executeAutoKeysQuery(p);

		p.close();

		return evaluationId;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<Evaluation> selectForumEvaluations(int forumId, EvaluationsSort evalSort) throws Exception
	{
		return this.selectTopicEvaluations(forumId, 0, evalSort);
	}

	/**
	 * {@inheritDoc}
	 */
	public List<Evaluation> selectTopicEvaluations(int forumId, int topicId, EvaluationsSort evalSort) throws Exception
	{
		return selectTopicEvaluations(forumId, topicId, true, evalSort);
	}

	
	private List<Evaluation> selectTopicEvaluations(int forumId, int topicId, boolean all, EvaluationsSort evalSort) throws Exception
	{
		PreparedStatement prepStmt = null;

		Grade grade = null;
		// get the users that have posts
		if (topicId == 0)
		{
			if (all) 
			{
				String sql = SystemGlobals.getSql("ForumModel.selectAllUserPostsCountByForum");
				
				String currSiteId = ToolManager.getCurrentPlacement().getContext();
				sql = applySort(evalSort, sql);
	
				prepStmt = JForum.getConnection().prepareStatement(sql);
				prepStmt.setString(1, currSiteId);
				prepStmt.setInt(2, forumId);
			}
			else 
			{
				String sql = SystemGlobals.getSql("ForumModel.selectUserPostsCountByForum");
				
				sql = applySort(evalSort, sql);
	
				prepStmt = JForum.getConnection().prepareStatement(sql);
				prepStmt.setInt(1, forumId);
				
			}

			grade = DataAccessDriver.getInstance().newGradeDAO().selectByForumId(forumId);
		} else
		{
			if (all) 
			{
				String sql = SystemGlobals.getSql("ForumModel.selectAllUserPostsCountByTopic");
				String currSiteId = ToolManager.getCurrentPlacement().getContext();
				sql = applySort(evalSort, sql);
				
				prepStmt = JForum.getConnection().prepareStatement(sql);
				prepStmt.setString(1, currSiteId);
				prepStmt.setInt(2, forumId);
				prepStmt.setInt(3, topicId);
			}
			else
			{
				String sql = SystemGlobals.getSql("ForumModel.selectUserPostsCountByTopic");
				
				sql = applySort(evalSort, sql);
				prepStmt = JForum.getConnection().prepareStatement(sql);
				prepStmt.setInt(1, forumId);
				prepStmt.setInt(2, topicId);
			}

			grade = DataAccessDriver.getInstance().newGradeDAO().selectByForumTopicId(forumId, topicId);
		}

		List<Evaluation> evaluations = new ArrayList<Evaluation>();
		Map<Integer, Evaluation> evalMap = new HashMap<Integer, Evaluation>();

		ResultSet rs = prepStmt.executeQuery();
		Evaluation evaluation = null;
		while (rs.next())
		{
			//check if user is in site and active
			if (!JForumUserUtil.isUserActive(rs.getString("sakai_user_id")))
				continue;
			
			// facilitators or admin users do not need evaluation
			if (!JForumUserUtil.isJForumFacilitator(rs.getString("sakai_user_id")))
			{
				org.sakaiproject.user.api.User sakUser = JForumUserUtil.getSakaiUser(rs.getString("sakai_user_id"));
				
				if (sakUser == null)
					continue;
				
				evaluation = this.fillEvaluationUserInfo(rs);
				evaluation.setSakaiDisplayId(sakUser.getDisplayId());
				evaluations.add(evaluation);
				evalMap.put(new Integer(evaluation.getUserId()), evaluation);
			}
		}
		
		rs.close();
		prepStmt.close();

		// fill evaluation details - score, comments and grade for each
		// evaluation
		if (grade != null)
		{
			PreparedStatement evalPrepStmt = JForum.getConnection().prepareStatement(
					SystemGlobals.getSql("EvaluationModel.selectEvalutionsByGradeId"));
			evalPrepStmt.setInt(1, grade.getId());

			ResultSet rsEvaluations = evalPrepStmt.executeQuery();

			while (rsEvaluations.next())
			{
				int userId = rsEvaluations.getInt("user_id");
				if (evalMap.containsKey(new Integer(userId)))
				{
					Evaluation eval = evalMap.get(new Integer(userId));

					eval.setId(rsEvaluations.getInt("evaluation_id"));
					eval.setGradeId(rsEvaluations.getInt("grade_id"));
					// eval.setScore(rsEvaluations.getFloat("score"));
					String str = rsEvaluations.getString("score");
					if (str == null)
						eval.setScore(null);
					else
					{
						try
						{
							eval.setScore(Float.valueOf(str));
						} catch (NumberFormatException e)
						{
							eval.setScore(null);
						}
					}

					eval.setComments(getEvaluationCommentsFromResultSet(rsEvaluations));
					
					if (rsEvaluations.getInt("released") == 1)
						eval.setReleased(true);
					else
						eval.setReleased(false);
				}
			}

			rsEvaluations.close();
			evalPrepStmt.close();
		}

		if (evalSort == EvaluationsSort.scores_a)
		{
			Collections.sort(evaluations, new Comparator<Evaluation>()
			{
				/*used 1000.0f for null scores to appear negative values below 1000
				in proper order*/
				public int compare(Evaluation eval1, Evaluation eval2)
				{
					Float f1 = eval1.getScore();
					if (f1 == null) f1 = Float.valueOf(1000.0f);
					Float f2 = eval2.getScore();
					if (f2 == null) f2 = Float.valueOf(1000.0f);
					
					int result = 0;					
					result = f1.compareTo(f2);

					return result;
				}
			});
		} 
		else if (evalSort == EvaluationsSort.scores_d)
		{
			/*used 1000.0f for null scores to appear negative values below 1000
			in proper order*/
			Collections.sort(evaluations, new Comparator<Evaluation>()
			{
				public int compare(Evaluation eval1, Evaluation eval2)
				{
					Float f1 = eval1.getScore();
					if (f1 == null) f1 = Float.valueOf(1000.0f);
					Float f2 = eval2.getScore();
					if (f2 == null) f2 = Float.valueOf(1000.0f);
					
					int result = 0;
					result = -1 * f1.compareTo(f2);

					return result;
				}
			});
		}

		return evaluations;
	}	
	
	/**
	 * {@inheritDoc}
	 */
	public List<Evaluation> selectCategoryEvaluations(int categoryId, EvaluationsSort evalSort) throws Exception
	{
		return selectCategoryEvaluations(categoryId, true, evalSort);
	}
	
	
	private List<Evaluation> selectCategoryEvaluations(int categoryId, boolean all, EvaluationsSort evalSort) throws Exception
	{
		// Category category = DataAccessDriver.getInstance().newCategoryDAO().selectById(categoryId);
		// List<Forum> forums = DataAccessDriver.getInstance().newForumDAO().selectByCategoryId(categoryId);
		PreparedStatement prepStmt = null;

		Grade grade = null;
		String sql = null;
		
		if (all)
		{
			sql = SystemGlobals.getSql("CategoryModel.selectAllUserPostsCountByCategory");
			
			String currSiteId = ToolManager.getCurrentPlacement().getContext();
			sql = applySort(evalSort, sql);

			prepStmt = JForum.getConnection().prepareStatement(sql);
			prepStmt.setString(1, currSiteId);
			prepStmt.setInt(2, categoryId);
		}
		else
		{
			sql = SystemGlobals.getSql("CategoryModel.selectUserPostsCountByCategory");
			sql = applySort(evalSort, sql);

			prepStmt = JForum.getConnection().prepareStatement(sql);
			prepStmt.setInt(1, categoryId);
		}
		
		
		grade = DataAccessDriver.getInstance().newGradeDAO().selectByCategoryId(categoryId);
		
		
		
		
		
		List<Evaluation> evaluations = new ArrayList<Evaluation>();
		Map<Integer, Evaluation> evalMap = new HashMap<Integer, Evaluation>();

		ResultSet rs = prepStmt.executeQuery();
		Evaluation evaluation = null;
		while (rs.next())
		{
			//check if user is in site and active
			if (!JForumUserUtil.isUserActive(rs.getString("sakai_user_id")))
				continue;
			
			// facilitators or admin users do not need evaluation
			if (!JForumUserUtil.isJForumFacilitator(rs.getString("sakai_user_id")))
			{
				org.sakaiproject.user.api.User sakUser = JForumUserUtil.getSakaiUser(rs.getString("sakai_user_id"));
				
				if (sakUser == null)
					continue;
				
				evaluation = this.fillEvaluationUserInfo(rs);
				evaluation.setSakaiDisplayId(sakUser.getDisplayId());
				evaluations.add(evaluation);
				evalMap.put(new Integer(evaluation.getUserId()), evaluation);
			}
		}
		
		rs.close();
		prepStmt.close();

		// fill evaluation details - score, comments and grade for each
		// evaluation
		if (grade != null)
		{
			PreparedStatement evalPrepStmt = JForum.getConnection().prepareStatement(
					SystemGlobals.getSql("EvaluationModel.selectEvalutionsByGradeId"));
			evalPrepStmt.setInt(1, grade.getId());

			ResultSet rsEvaluations = evalPrepStmt.executeQuery();

			while (rsEvaluations.next())
			{
				int userId = rsEvaluations.getInt("user_id");
				if (evalMap.containsKey(new Integer(userId)))
				{
					Evaluation eval = evalMap.get(new Integer(userId));

					eval.setId(rsEvaluations.getInt("evaluation_id"));
					eval.setGradeId(rsEvaluations.getInt("grade_id"));
					// eval.setScore(rsEvaluations.getFloat("score"));
					String str = rsEvaluations.getString("score");
					if (str == null)
						eval.setScore(null);
					else
					{
						try
						{
							eval.setScore(Float.valueOf(str));
						} catch (NumberFormatException e)
						{
							eval.setScore(null);
						}
					}

					eval.setComments(getEvaluationCommentsFromResultSet(rsEvaluations));
					
					if (rsEvaluations.getInt("released") == 1)
						eval.setReleased(true);
					else
						eval.setReleased(false);
				}
			}

			rsEvaluations.close();
			evalPrepStmt.close();
		}

		if (evalSort == EvaluationsSort.scores_a)
		{
			Collections.sort(evaluations, new Comparator<Evaluation>()
			{
				/*used 1000.0f for null scores to appear negative values below 1000
				in proper order*/
				public int compare(Evaluation eval1, Evaluation eval2)
				{
					Float f1 = eval1.getScore();
					if (f1 == null) f1 = Float.valueOf(1000.0f);
					Float f2 = eval2.getScore();
					if (f2 == null) f2 = Float.valueOf(1000.0f);
					
					int result = 0;					
					result = f1.compareTo(f2);

					return result;
				}
			});
		} 
		else if (evalSort == EvaluationsSort.scores_d)
		{
			/*used 1000.0f for null scores to appear negative values below 1000
			in proper order*/
			Collections.sort(evaluations, new Comparator<Evaluation>()
			{
				public int compare(Evaluation eval1, Evaluation eval2)
				{
					Float f1 = eval1.getScore();
					if (f1 == null) f1 = Float.valueOf(1000.0f);
					Float f2 = eval2.getScore();
					if (f2 == null) f2 = Float.valueOf(1000.0f);
					
					int result = 0;
					result = -1 * f1.compareTo(f2);

					return result;
				}
			});
		}

		return evaluations;
	}

	/**
	 * @param evalSort
	 * @param sql
	 * @return
	 */
	private String applySort(EvaluationsSort evalSort, String sql)
	{
		if (evalSort == null)
		{
			sql = sql.concat(" ORDER BY user_lname ASC");
			return sql;
		}
			
		switch (evalSort)
		{
			case last_name_a:
			{
				sql = sql.concat(" ORDER BY user_lname ASC");
				break;
			}
			case last_name_d:
			{
				sql = sql.concat(" ORDER BY user_lname DESC");
				break;
			}
			case total_posts_a:
			{
				sql = sql.concat(" ORDER BY user_posts_count ASC");
				break;
			}
			case total_posts_d:
			{
				sql = sql.concat(" ORDER BY user_posts_count DESC");
				break;
			}
			default:
			{
				sql = sql.concat(" ORDER BY user_lname ASC");
				break;
			}

		}
		return sql;
	}

	/**
	 * @param rs
	 * @return
	 */
	private Evaluation fillEvaluationUserInfo(ResultSet rs) throws Exception
	{
		Evaluation evaluation = new Evaluation();

		evaluation.setId(-1);

		evaluation.setUserId(rs.getInt("user_id"));
		evaluation.setTotalPosts(rs.getInt("user_posts_count"));
		evaluation.setUserFirstName(rs.getString("user_fname"));
		evaluation.setUserLastName(rs.getString("user_lname"));
		evaluation.setSakaiUserId(rs.getString("sakai_user_id"));
		evaluation.setUsername(rs.getString("username"));
		
		return evaluation;
	}

	/**
	 * {@inheritDoc}
	 */
	public void update(Evaluation evaluation) throws Exception
	{
		PreparedStatement p = JForum.getConnection().prepareStatement(SystemGlobals.getSql("EvaluationModel.update"));
		if (evaluation.getScore() == null)
			p.setNull(1, Types.FLOAT);
		else
			p.setFloat(1, evaluation.getScore());
		p.setString(2, evaluation.getComments());
		p.setInt(3, evaluation.getEvaluatedBy());
		p.setTimestamp(4, new Timestamp(System.currentTimeMillis()));
		p.setBoolean(5, evaluation.isReleased());
		p.setInt(6, evaluation.getId());

		p.executeUpdate();
		p.close();
	}

	/**
	 * {@inheritDoc}
	 */
	public Evaluation selectEvaluationByForumIdUserId(int forumId, int userId) throws Exception
	{
		Grade grade = DataAccessDriver.getInstance().newGradeDAO().selectByForumId(forumId);

		if (grade == null)
			return null;

		Evaluation evaluation = selectUserEvaluation(userId, grade);

		return evaluation;
	}
	
	/**
	 * {@inheritDoc}
	 */
	public Evaluation selectEvaluationByCategoryIdUserId(int categoryId, int userId) throws Exception
	{
		Grade grade = DataAccessDriver.getInstance().newGradeDAO().selectByCategoryId(categoryId);

		if (grade == null)
			return null;

		Evaluation evaluation = selectUserEvaluation(userId, grade);

		return evaluation;
	}

	/**
	 * @param userId
	 * @param grade
	 * @return
	 * @throws SQLException
	 */
	private Evaluation selectUserEvaluation(int userId, Grade grade) throws SQLException, Exception
	{
		PreparedStatement evalPrepStmt = JForum.getConnection().prepareStatement(
				SystemGlobals.getSql("EvaluationModel.selectEvalutionByGradeIdUserId"));
		evalPrepStmt.setInt(1, grade.getId());
		evalPrepStmt.setInt(2, userId);

		ResultSet rsEvaluation = evalPrepStmt.executeQuery();
		Evaluation evaluation = null;
		if (rsEvaluation.next())
		{
			evaluation = new Evaluation();

			evaluation.setId(rsEvaluation.getInt("evaluation_id"));
			evaluation.setGradeId(rsEvaluation.getInt("grade_id"));
			evaluation.setUserId(rsEvaluation.getInt("user_id"));
			// evaluation.setScore(rsEvaluation.getFloat("score"));
			String str = rsEvaluation.getString("score");
			if (str == null)
				evaluation.setScore(null);
			else
			{
				try
				{
					evaluation.setScore(Float.valueOf(str));
				} catch (NumberFormatException e)
				{
					evaluation.setScore(null);
				}
			}
			evaluation.setSakaiUserId(rsEvaluation.getString("sakai_user_id"));
			evaluation.setComments(getEvaluationCommentsFromResultSet(rsEvaluation));
			
			if (rsEvaluation.getInt("released") == 1)
				evaluation.setReleased(true);
			else
				evaluation.setReleased(false);
		}

		rsEvaluation.close();
		evalPrepStmt.close();

		return evaluation;
	}

	/**
	 * {@inheritDoc}
	 */
	public Evaluation selectEvaluationByForumIdTopicIdUserId(int forumId, int topicId, int userId) throws Exception
	{
		Grade grade = DataAccessDriver.getInstance().newGradeDAO().selectByForumTopicId(forumId, topicId);

		if (grade == null)
			return null;

		Evaluation evaluation = selectUserEvaluation(userId, grade);

		return evaluation;
	}

	/**
	 * {@inheritDoc}
	 */
	public int selectForumEvaluationsCount(int forumId) throws Exception
	{
		Grade grade = DataAccessDriver.getInstance().newGradeDAO().selectByForumId(forumId);

		if (grade == null)
			return 0;

		int evalCount = selectEvaluationsCountByGradeId(grade.getId());

		return evalCount;
	}

	/**
	 * {@inheritDoc}
	 */
	public int selectForumTopicEvaluationsCount(int forumId) throws Exception
	{
		PreparedStatement p = JForum.getConnection().prepareStatement(SystemGlobals.getSql("EvaluationModel.selectEvalutionsCountByForumId"));
		p.setInt(1, forumId);
		ResultSet rs = p.executeQuery();
		
		int evalCount = 0;
		if (rs.next()) {
			evalCount = rs.getInt("eval_count");
		}
		rs.close();
		p.close();

		return evalCount;
	}

	/**
	 * {@inheritDoc}
	 */
	public int selectForumTopicEvaluationsCountById(int topicId) throws Exception
	{
		Topic topic = DataAccessDriver.getInstance().newTopicDAO().selectById(topicId);
		Grade grade = DataAccessDriver.getInstance().newGradeDAO().selectByForumTopicId(topic.getForumId(), topicId);
		int evalCount = selectEvaluationsCountByGradeId(grade.getId());

		return evalCount;
	}

	/**
	 * {@inheritDoc}
	 */
	public List<Evaluation> selectForumEvaluationsWithPosts(int forumId) throws Exception
	{
		return selectTopicEvaluations(forumId, 0, false, EvaluationDAO.EvaluationsSort.last_name_a);
	}
	
	/**
	 * {@inheritDoc}
	 */
	public List<Evaluation> selectCategoryEvaluationsWithPosts(int categoryId) throws Exception
	{
		return selectCategoryEvaluations(categoryId, false, EvaluationsSort.last_name_a);
	}

	/**
	 * {@inheritDoc}
	 */
	public List<Evaluation> selectTopicEvaluationsWithPosts(int forumId, int topicId) throws Exception
	{
		return selectTopicEvaluations(forumId, topicId, false, EvaluationDAO.EvaluationsSort.last_name_a);
	}
	
	/**
	 * Utility method to read the post text fromt the result set.
	 * This method may be useful when using some "non-standart" way
	 * to store text, like oracle does when using (c|b)lob
	 * 
	 * @param rs The resultset to fetch data from
	 * @return The comments string
	 * @throws Exception
	 */
	protected String getEvaluationCommentsFromResultSet(ResultSet rs) throws Exception
	{
		return rs.getString("comments");
	}

	/**
	 * {@inheritDoc}
	 */
	public void delete(int evaluationId) throws Exception
	{
		//delete evaluation
		PreparedStatement p = JForum.getConnection().prepareStatement(SystemGlobals.getSql("EvaluationModel.deleteById"));
		p.setInt(1, evaluationId);

		p.executeUpdate();

		p.close();
		
	}

	/**
	 * {@inheritDoc}
	 */
	public int selectEvaluationsCountByGradeId(int gradeId) throws SQLException
	{
		PreparedStatement p = JForum.getConnection().prepareStatement(SystemGlobals.getSql("EvaluationModel.selectEvalutionsCountByGradeId"));
		p.setInt(1, gradeId);
		ResultSet rs = p.executeQuery();
		
		int evalCount = 0;
		if (rs.next()) {
			evalCount = rs.getInt("eval_count");
		}

		rs.close();
		p.close();
		return evalCount;
	}
}
