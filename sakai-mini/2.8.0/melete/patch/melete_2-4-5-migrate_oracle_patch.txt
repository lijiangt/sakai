Index: melete-impl/src/java/org/sakaiproject/component/app/melete/HibernateUtil.java
===================================================================
--- melete-impl/src/java/org/sakaiproject/component/app/melete/HibernateUtil.java	(revision 50442)
+++ melete-impl/src/java/org/sakaiproject/component/app/melete/HibernateUtil.java	(working copy)
@@ -21,6 +21,8 @@
 **********************************************************************************/
 package org.sakaiproject.component.app.melete;
 import java.io.Serializable;
+import java.util.Iterator;
+import java.util.Map;
 
 import org.hibernate.HibernateException;
 import org.hibernate.Session;
@@ -66,4 +68,47 @@
 		public void setSessionFactory(SessionFactory sessionFactory) {
 			this.sessionFactory = sessionFactory;
 		}
+		
+		// These are needed for oracle... 
+		
+		public void ensureModuleHasNonNulls(Module mod)
+		{
+			Map sections = mod.getSections(); 
+			if (sections != null && sections.size() > 0)
+			{
+				Iterator iter = sections.keySet().iterator(); 
+				
+				while (iter.hasNext())
+				{
+					Object key; 
+					Section cur;  
+					
+					key = iter.next(); 
+					cur = (Section) sections.get(key); 
+					ensureSectionHasNonNull(cur);
+				}
+			}
+			if (null == mod.getCreatedByFname())
+			{
+				mod.setCreatedByFname("");
+			}
+			if (null == mod.getCreatedByFname())
+			{
+				mod.setCreatedByFname("");
+			}
+
+		}
+		
+		public void ensureSectionHasNonNull(Section sec)
+		{
+			if (null == sec.getCreatedByFname() )
+			{
+				sec.setCreatedByFname("");
+			}
+
+			if (null == sec.getCreatedByLname() )
+			{
+				sec.setCreatedByLname("");
+			}
+		}
 }		
\ No newline at end of file
Index: melete-impl/src/java/org/sakaiproject/component/app/melete/SectionDB.java
===================================================================
--- melete-impl/src/java/org/sakaiproject/component/app/melete/SectionDB.java	(revision 50442)
+++ melete-impl/src/java/org/sakaiproject/component/app/melete/SectionDB.java	(working copy)
@@ -77,6 +77,13 @@
 			  section.setModificationDate(new java.util.Date());
 			  section.setModuleId(module.getModuleId().intValue());
 			  section.setDeleteFlag(false);
+			  
+			  /*
+			   * Since Oracle silently transforms "" to nulls, we need to check to see if 
+			   * these non null properties are in fact null. 
+			   */
+
+			  hibernateUtil.ensureSectionHasNonNull(section);
 			  	// save object
 			  tx = session.beginTransaction();
 			  session.save(section);
@@ -128,6 +135,9 @@
 			  // set default values for not-null fields
 			  section.setCreationDate(new java.util.Date());
 			  section.setModificationDate(new java.util.Date());
+			  
+			  hibernateUtil.ensureSectionHasNonNull(section);
+
 	 	  	  // save object
 			  tx = session.beginTransaction();
 			  session.saveOrUpdate(section);
@@ -166,6 +176,8 @@
 	         Transaction tx = null;
 			try
 			{
+				  hibernateUtil.ensureSectionHasNonNull(section);
+	
 			  // set default values for not-null fields
 				SectionResource secResource = (SectionResource)section.getSectionResource();
 				if(secResource == null)
@@ -225,7 +237,8 @@
 		       try
 		       	{
 		    	   tx = session.beginTransaction();
-		    	   
+					  hibernateUtil.ensureSectionHasNonNull(sec);
+
 		    	   //Delete section
 		    	   sec.setDeleteFlag(true);
 		    	   session.saveOrUpdate(sec);
@@ -390,7 +403,12 @@
 	         Transaction tx = null;
 			try
 			{
+				
+				  hibernateUtil.ensureSectionHasNonNull(section);
+
+				
 				SectionResource secResource = (SectionResource)section.getSectionResource();
+
 				if (secResource == null) secResource = new  SectionResource();
 				// set secResource fields
 				secResource.setSection(section);
@@ -443,6 +461,8 @@
 	         Transaction tx = null;
 			try
 			{
+				  hibernateUtil.ensureSectionHasNonNull(section);
+
 				SectionResource secResource = (SectionResource)section.getSectionResource();
 				if (secResource == null) secResource = new  SectionResource();
 				// set secResource fields
@@ -541,6 +561,8 @@
 	         Transaction tx = null;
 			try
 			{
+				  hibernateUtil.ensureSectionHasNonNull(section);
+
 				// delete SectionResource
 				tx = session.beginTransaction();
 				section.setSectionResource(null);
@@ -583,6 +605,8 @@
 	         Transaction tx = null;
 			try
 			{
+				  hibernateUtil.ensureSectionHasNonNull(section);
+
 				// set secResource fields
 				secResource.setSection(section);
 				secResource.setSectionId(section.getSectionId());
Index: melete-impl/src/java/org/sakaiproject/component/app/melete/ModuleServiceImpl.java
===================================================================
--- melete-impl/src/java/org/sakaiproject/component/app/melete/ModuleServiceImpl.java	(revision 50442)
+++ melete-impl/src/java/org/sakaiproject/component/app/melete/ModuleServiceImpl.java	(working copy)
@@ -507,6 +507,7 @@
 	 * processLicenseInformation) WITH THE ORACLE VERSION. THE ORACLE VERSION IS LOCATED
 	 * AT /patch/migrate_oracle.txt
 	 */
+	/* 20080408 mjw - brought in oracle methods for UCD */
 	public int migrateMeleteDocs(String meleteDocsDir) throws Exception
 	{
 		Connection dbConnection = null;
@@ -578,20 +579,20 @@
 			List modList = null;
 			List colNames = null;
 			if (rs != null){
-			  colNames = new ArrayList();
-			  colNames.add(new String("melete_module_bkup.module_id"));
-			  colNames.add(new String("melete_module_bkup.license_code"));
-			  colNames.add(new String("melete_module_bkup.cc_license_url"));
-			  colNames.add(new String("melete_module_bkup.req_attr"));
-			  colNames.add(new String("melete_module_bkup.allow_cmrcl"));
-			  colNames.add(new String("melete_module_bkup.allow_mod"));
-			  colNames.add(new String("melete_module_bkup.created_by_fname"));
-			  colNames.add(new String("melete_module_bkup.created_by_lname"));	
-			  colNames.add(new String("melete_module_bkup.creation_date"));		
-			  colNames.add(new String("melete_course_module.course_id"));
+                colNames = new ArrayList();
+                colNames.add(new String("module_id"));
+                colNames.add(new String("license_code"));
+                colNames.add(new String("cc_license_url"));
+                colNames.add(new String("req_attr"));
+                colNames.add(new String("allow_cmrcl"));
+                colNames.add(new String("allow_mod"));
+                colNames.add(new String("created_by_fname"));
+                colNames.add(new String("created_by_lname"));
+                colNames.add(new String("creation_date"));
+                colNames.add(new String("course_id"));
 
-			  modList = toList(rs, colNames);
-			}
+                modList = toList(rs, colNames);
+              }
 
 			rs.close();
 	    	stmt.close();
@@ -602,10 +603,15 @@
 	    	{
 	    		logger.info("NUMBER OF MODULES IN THIS DATABASE IS "+modList.size());
 	    		for (ListIterator i = modList.listIterator(); i.hasNext(); ) {
-	    			Map modMap = (LinkedHashMap)i.next();
-	    		    modId = ((Integer)modMap.get("melete_module_bkup.module_id")).intValue();
-	    		    courseId = (String)modMap.get("melete_course_module.course_id");
-	    		 
+	    			//Map modMap = (LinkedHashMap)i.next();
+                    //Object obj =modMap.get("module_id");
+                    //Integer in =new Integer(obj.toString());
+                    //modId = in.intValue();
+					Map modMap = (LinkedHashMap)i.next();
+
+                    modId = ((java.math.BigDecimal)modMap.get("module_id")).intValue();
+                    
+					courseId = (String)modMap.get("course_id");
                     SubSectionUtilImpl ssuImpl = new SubSectionUtilImpl();
           	        stmt = dbConnection.createStatement();
           	        
@@ -640,7 +646,6 @@
 						    {
 							  if (contentType.equals("typeEditor"))
 							  {
-								//processSection = meleteExportService.checkFileExists(rs.getString("content_path"));
 								processSection = meleteUtil.checkFileExists(rs.getString("content_path"));
 							  }
 							  if (contentType.equals("typeUpload"))
@@ -814,28 +819,39 @@
 		return MIGRATE_FAILED;
 	}
 
+	
 	private MeleteResource processLicenseInformation(Map modMap, MeleteResource meleteSectionResource)
 	{
 		String[] result = new String[2];
 		GregorianCalendar cal = new GregorianCalendar();
-		int licenseCodes = ((Integer)modMap.get("melete_module_bkup.license_code")).intValue();
-		String copyrightOwner = (String)modMap.get("melete_module_bkup.created_by_fname")+" "+(String)modMap.get("melete_module_bkup.created_by_lname");
-		cal.setTime((Date)modMap.get("melete_module_bkup.creation_date"));
+		int licenseCodes = ((java.math.BigDecimal)modMap.get("license_code")).intValue();
+		String copyrightOwner = (String)modMap.get("created_by_fname")+" "+(String)modMap.get("created_by_lname");
+		cal.setTime((Date)modMap.get("creation_date"));
 		String copyrightYear = String.valueOf(cal.get(Calendar.YEAR));
 		 if(licenseCodes == CC_CODE)
 		 	{
-		 		meleteSectionResource.setCcLicenseUrl((String)modMap.get("melete_module_bkup.cc_license_url"));
+		 		meleteSectionResource.setCcLicenseUrl((String)modMap.get("cc_license_url"));
 		 		meleteSectionResource.setLicenseCode(licenseCodes);
 		 		meleteSectionResource.setReqAttr(true);
-		 		meleteSectionResource.setAllowCmrcl(((Boolean)modMap.get("melete_module_bkup.allow_cmrcl")).booleanValue());
-		 		meleteSectionResource.setAllowMod(((Integer)modMap.get("melete_module_bkup.allow_mod")).intValue());
+
+				if(modMap.get("allow_cmrcl").toString().equals("1")) {
+					meleteSectionResource.setAllowCmrcl(true);
+				} else {
+					meleteSectionResource.setAllowCmrcl(false);
+				}
+
+		 		//meleteSectionResource.setAllowCmrcl(((Boolean)modMap.get("allow_cmrcl")).booleanValue());
+
+		 		//meleteSectionResource.setAllowMod(((Integer)modMap.get("allow_mod")).intValue());
+				meleteSectionResource.setAllowMod(((java.math.BigDecimal)modMap.get("allow_mod")).intValue());
+
 		 		meleteSectionResource.setCopyrightOwner(copyrightOwner);
 		 		meleteSectionResource.setCopyrightYear(copyrightYear);
 		 	}
 		 else if(licenseCodes == PD_CODE)
 		 {
 
-	 	  	meleteSectionResource.setCcLicenseUrl((String)modMap.get("melete_module_bkup.cc_license_url"));
+	 	  	meleteSectionResource.setCcLicenseUrl((String)modMap.get("cc_license_url"));
 	 	  	meleteSectionResource.setLicenseCode(licenseCodes);
 	 	  	meleteSectionResource.setReqAttr(false);
 	 	  	meleteSectionResource.setAllowCmrcl(false);
@@ -859,7 +875,6 @@
 		 }
 		 return meleteSectionResource;
 	}
-	/*END OF METHODS THAT NEED TO BE REPLACED FOR ORACLE VERSION*/
 
 
 	private static final List toList(ResultSet rs, List wantedColumnNames) throws SQLException
@@ -1178,4 +1193,4 @@
 //			MeleteExportService meleteExportService) {
 //		this.meleteExportService = meleteExportService;
 //	}
-}
\ No newline at end of file
+}
Index: melete-impl/src/java/org/sakaiproject/component/app/melete/ModuleDB.java
===================================================================
--- melete-impl/src/java/org/sakaiproject/component/app/melete/ModuleDB.java	(revision 50442)
+++ melete-impl/src/java/org/sakaiproject/component/app/melete/ModuleDB.java	(working copy)
@@ -242,7 +242,12 @@
 	 */
 	public void addModule(Module module, ModuleShdates moduleshowdates, String userId, String courseId)
 	{
+		/*
+	   	 * Since Oracle silently transforms "" to nulls, we need to check to see if 
+		 * these non null properties are in fact null. 
+		 */
 
+		hibernateUtil.ensureModuleHasNonNulls(module);
 	try{
 	     Session session = hibernateUtil.currentSession();
            Transaction tx = null;
@@ -253,6 +258,7 @@
 		  module.setUserId(userId);
 		  //module.setModificationDate(new java.util.Date());
 
+
     		// assign sequence number
 		  int seq = assignSequenceNumber(session, courseId);
 
@@ -925,12 +931,23 @@
 
 	 public void updateModule(Module mod) throws Exception
 	 {
+		 
+		hibernateUtil.ensureModuleHasNonNulls(mod);
 	 	Transaction tx = null;
 	 	try
 		{
 
 	      Session session = hibernateUtil.currentSession();
-
+	      
+		  if (null == mod.getCreatedByFname())
+		  {
+			  mod.setCreatedByFname("");
+		  }
+		  
+		  if (null == mod.getCreatedByLname())
+		  {
+			  mod.setCreatedByLname("");
+		  }
 	      tx = session.beginTransaction();
 
 	      //Update module properties
